/*
Grid

### Flexbox with inline-block fallback

Display: inline-block; mimics the behaviour of flexbox a bit better than floating elements when you have alternating widths of your grid cells and you want them to stay in line.

If you require your columns to stretch to the full height of your container, use the table and table-cell properties. This will not be a good solution if you want to wrap grid cells on multiple rows but is a good fit if you can control the number of grid cells in a row.

.grid - If flexbox is supported, all children will behave like flex items. If not, children are required to have a `.grid__cell class declared on them.

markup:
<div class="{$modifiers}">
	 <div class="{$modifiers}__cell {$modifiers}__cell--hero" style="background:Red;">1</div><!--
  --><div class="grid__cell">2<br>lines</div><!--
  --><div class="grid__cell">3</div><!--
  --><div class="grid__cell">4</div><!--
  --><div class="grid__cell">5</div>
</div>

Styleguide 2.7
*/


/*
 * 1. Clearfix reloaded (http://cssmojo.com/the-very-latest-clearfix-reloaded/)
 */

.grid {
  display: flex;
  flex-wrap: wrap;
  flex-direction: row;
  // height: 100%;
  &:after {
    /* 1. */
    content:" ";
    display:block;
    clear:both;
  }
  &__cell {
    flex: 1 1 50%;
    float: left;
    min-width: 50%;
    width: 50%;
    min-height: 50%;
    flex-basis: 50%;
    // height: 50vh;
  }
  /* Need breakpoint for wide and narrow viewports */
  @include breakpoint($gt-small-desktop,"(max-aspect-ratio: 2/1)") {
    &__cell {
      height: 25vh;
    }
  }
}
