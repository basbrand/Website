/*
Layout

Styleguide 2.0
*/

/*
Debug layout

Styleguide 2.0.1
*/

// $debug-layout: true;
// $debug-rhythm: true;
html:after,
body:after {
  display: block;
  position: fixed;
  right: 0;
  background: #fff;
  padding: rhythm();
}
html:after {
  top: 0;
  @include breakpoint($gt-small-handheld) {
    content: 'gt-small-handheld';
  }
  @include breakpoint($gt-medium-handheld) {
    content: 'gt-medium-handheld';
  }
  @include breakpoint($gt-large-handheld) {
    content: 'gt-large-handheld';
  }
  @include breakpoint($gt-small-desktop) {
    content: 'gt-small-desktop';
  }
  @include breakpoint($gt-medium-desktop) {
    content: 'gt-medium-desktop';
  }
  @include breakpoint($gt-large-desktop) {
    content: 'gt-large-desktop';
  }
}
body:after {
  top: rhythm(6);
  @include breakpoint($landscape) {
    content: 'landscape';
  }
  @include breakpoint($portrait) {
    content: 'portrait';
  }
}

@mixin debug-rhythm($rhythm: $rhythm)
{
    &:after {

        $to: transparent;
        $from: rgba(226, 255, 255, .25);

        pointer-events: none;
        display: block;
        position: absolute;
        left: 0; top: 0; right: 0; bottom: 0;
        z-index: 10;
        content: "";
        background-image: -webkit-linear-gradient($from 50%, $to 50%);
        background-image: linear-gradient($from 50%, $to 50%);
        background-size: 2*$rhythm 2*$rhythm;
    }
}

@mixin debug-layout($columns: $columns, $color: #000, $gutter-width: $gutter-width)
{
    background-size: percentage(1 / $columns) 100%;
    background-image:
        linear-gradient(to right,
            rgba($color,.1) 0,
            rgba($color,.1) $gutter-width / 2,
            transparent $gutter-width / 2,
            transparent percentage($columns / $columns)
        ),
        linear-gradient(to left,
            rgba($color,.1) 0,
            rgba($color,.1) $gutter-width / 2,
            transparent $gutter-width / 2,
            transparent percentage($columns / $columns)
        ),
        linear-gradient(to left,
            transparent 0%,
            rgba(0,0,0,.5) 1px,
            transparent 1px,
            transparent  percentage($columns / $columns)
        )
    ;
}

@if $debug-layout {
    %debug-layout {
        position: relative;
        &::before {
        	pointer-events: none;
            content: '';
            display: block;
            position: absolute;
            z-index: 10;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;

            background-color: transparent;
            background-repeat: repeat-x;
            background-position: 0 0;

            @include debug-layout();

            @each $breakpoint, $layout in $layouts {
            	@include breakpoint($breakpoint) {
                    $columns: map-get($layout, "columns");
                    $color: map-get($layout, "debug-color");
                    @include debug-layout($columns, $color, $gutter-width);
		                content: '#{$columns} columns at #{$breakpoint}';
                    text-shadow: 1px 1px 0 $white;
                }
            }
        }
}

    .debug-layout {
        @extend %debug-layout;
    }
    .debug-rhythm {
        @include debug-rhythm();
    }
}



/* 2.1 Layout */
@import "layout/layout";

/* 2.2 Gutter */
@import "layout/gutter";

/* 2.3 Wing */
@import "layout/wing";

/* 2.4 Leader */
@import "layout/leader";

/* 2.5 Trailer */
@import "layout/trailer";

/* 2.6 Bleed */
@import "layout/bleed";

/* 2.7 Grid */
@import "layout/grid";

/* 2.8 Media */
@import "layout/media";

/* 2.9 Tier */
@import "layout/tier";
